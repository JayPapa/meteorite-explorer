{"version":3,"sources":["SearchPanel.js","SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["SearchPanel","props","react_default","a","createElement","className","onSubmit","handleSubmit","value","searchTerm","placeholder","onChange","handleChange","type","SearchResults","headers","map","el","key","values","length","id","name","nametype","recclass","mass","fall","year","substring","geolocation","latitude","longitude","App","state","data","e","preventDefault","console","log","target","fetch","concat","_this","then","res","json","setState","_this2","this","src_SearchPanel_0","src_SearchResults_0","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAYeA,SATK,SAACC,GACjB,OACQC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcC,SAAUL,EAAMM,cAC1CL,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAaG,MAAOP,EAAMQ,WAAYC,YAAY,wBAAwBC,SAAUV,EAAMW,eAC3GV,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gBAAgBQ,KAAK,SAASL,MAAM,cC0BtDM,SA9BO,SAACb,GACnB,OACIC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACKH,EAAMc,QAAQC,IAAI,SAACC,GAChB,OAAQf,EAAAC,EAAAC,cAAA,MAAIc,IAAKD,GAAKA,OAIlCf,EAAAC,EAAAC,cAAA,aACMH,EAAMkB,OAAOC,OAAS,EAAInB,EAAMkB,OAAOH,IAAI,SAAAR,GACzC,OAAQN,EAAAC,EAAAC,cAAA,MAAIc,IAAKV,EAAMa,IACXnB,EAAAC,EAAAC,cAAA,UAAKI,EAAMc,MACXpB,EAAAC,EAAAC,cAAA,UAAKI,EAAMa,IACXnB,EAAAC,EAAAC,cAAA,UAAKI,EAAMe,UACXrB,EAAAC,EAAAC,cAAA,UAAKI,EAAMgB,UACXtB,EAAAC,EAAAC,cAAA,UAAKI,EAAMiB,MACXvB,EAAAC,EAAAC,cAAA,UAAKI,EAAMkB,MACXxB,EAAAC,EAAAC,cAAA,UAAKI,EAAMmB,KAAOnB,EAAMmB,KAAKC,UAAU,EAAE,GAAK,IAC9C1B,EAAAC,EAAAC,cAAA,UAAKI,EAAMqB,YAAcrB,EAAMqB,YAAYC,SAAW,IACtD5B,EAAAC,EAAAC,cAAA,UAAKI,EAAMqB,YAAcrB,EAAMqB,YAAYE,UAAY,OAGvE7B,EAAAC,EAAAC,cAAA,6DC4BD4B,oNA/CbC,MAAQ,CACNC,KAAM,GACNzB,WAAY,MAYdF,aAAe,SAAC4B,GACdA,EAAEC,iBACFC,QAAQC,IAAI,WAAaH,EAAEI,OAAO/B,OAClCgC,MAAK,+DAAAC,OAAgEC,EAAKT,MAAMxB,aAC/EkC,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SAEZF,KAAK,SAAAT,GACJG,QAAQC,IAAIJ,GACZQ,EAAKI,SAAS,CAACZ,cAGnBtB,aAAe,SAACuB,GACdO,EAAKI,SAAS,CAACrC,WAAY0B,EAAEI,OAAO/B,4FAvBlB,IAAAuC,EAAAC,KAClBR,MAAK,+DAAAC,OAAgEO,KAAKf,MAAMxB,aAC7EkC,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SAEZF,KAAK,SAAAT,GACJG,QAAQC,IAAIJ,GACZa,EAAKD,SAAS,CAACZ,4CAmBjB,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,sBAIAH,EAAAC,EAAAC,cAAC6C,EAAD,CAAa1C,aAAcyC,KAAKzC,aAClBK,aAAcoC,KAAKpC,aACnBH,WAAYuC,KAAKf,MAAMxB,aAErCP,EAAAC,EAAAC,cAAC8C,EAAD,CAAenC,QAAS,CAAC,OAAQ,KAAM,YAAa,YAAa,WAAY,OAAQ,OAAQ,WAAY,aACzFI,OAAQ6B,KAAKf,MAAMC,eA1C3BiB,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.67869e39.chunk.js","sourcesContent":["import React from 'react'\r\nimport './SearchPanel.css'\r\n\r\nconst SearchPanel = (props) => {\r\n    return (\r\n            <form className=\"search-form\" onSubmit={props.handleSubmit}>\r\n                <input className=\"search-box\" value={props.searchTerm} placeholder=\"Search for meteorites\" onChange={props.handleChange} />\r\n                <input className=\"search-button\" type=\"submit\" value=\"Search\"/>\r\n            </form>\r\n    )\r\n}\r\n\r\nexport default SearchPanel;","import React from 'react'\r\nimport './SearchResults.css'\r\n\r\nconst SearchResults = (props) => {\r\n    return (\r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    {props.headers.map((el) => {\r\n                        return (<th key={el}>{el}</th>)\r\n                    })}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                { props.values.length > 0 ? props.values.map(value => {\r\n                    return (<tr key={value.id}>\r\n                                <td>{value.name}</td>\r\n                                <td>{value.id}</td>\r\n                                <td>{value.nametype}</td>\r\n                                <td>{value.recclass}</td>\r\n                                <td>{value.mass}</td>\r\n                                <td>{value.fall}</td>\r\n                                <td>{value.year ? value.year.substring(0,4) : ''}</td>\r\n                                <td>{value.geolocation ? value.geolocation.latitude : ''}</td>\r\n                                <td>{value.geolocation ? value.geolocation.longitude : ''}</td>\r\n                            </tr>)\r\n                }): \r\n                <tr>There is no data for the terms you searched</tr>}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default SearchResults","import React from 'react';\n// components\nimport SearchPanel from './SearchPanel'\nimport SearchResults from './SearchResults'\n// assets\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    data: [],\n    searchTerm: ''\n  }\n  componentDidMount() {\n    fetch(`https://data.nasa.gov/resource/gh4g-9sfh.json?$limit=500&$q=${this.state.searchTerm}`)\n      .then(res => {\n        return res.json()\n      })\n      .then(data => {\n        console.log(data)\n        this.setState({data})\n      })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('this is ' + e.target.value);\n    fetch(`https://data.nasa.gov/resource/gh4g-9sfh.json?$limit=500&$q=${this.state.searchTerm}`)\n    .then(res => {\n      return res.json()\n    })\n    .then(data => {\n      console.log(data)\n      this.setState({data})\n    })\n  }\n  handleChange = (e) => {\n    this.setState({searchTerm: e.target.value})\n  }\n  render() {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            Meteorite-Explorer\n          </header>\n          {/* Search Panel */}\n          <SearchPanel handleSubmit={this.handleSubmit}\n                        handleChange={this.handleChange}\n                        searchTerm={this.state.searchTerm} />\n          {/* Search Results */}\n          <SearchResults headers={[\"Name\", \"ID\", \"Name Type\", \"Rec Class\", \"Mass (g)\", \"Fall\", \"Year\", \"Latitude\", \"Longitude\"]}\n                          values={this.state.data}/>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}